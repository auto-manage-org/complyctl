.\" Automatically generated by Pandoc 3.1.11.1
.\"
.TH "COMPLYCTL" "1" "April 2025" "Complyctl Manual" ""
.SH NAME
complyctl \- Complyctl CLI perform compliance assessment activities
using plugins for different underlying technologies.
.SH SYNOPSIS
\f[B]complyctl\f[R] [command] [flags]
.SH DESCRIPTION
Complyctl CLI leverages OSCAL to perform compliance assessment
activities, using plugins for each stage of the lifecycle.
.PP
Complyctl can be extended to support desired policy engines (PVPs) by
the use of plugins.
The plugin acts as the integration between complyctl and the PVPs native
interface.
Each plugin is responsible for converting the policy content described
in OSCAL into the input format expected by the PVP.
In addition, the plugin converts the raw results provided by the PVP
into the schema used by complyctl to generate OSCAL output.
.PP
Plugins communicate with complyctl via gRPC and can be authored using
any preferred language.
The plugin acts as the gRPC server while the complyctl CLI acts as the
client.
When a complyctl command is run, it invokes the appropriate method
served by the plugin.
.PP
Complyctl is built on
https://github.com/oscal\-compass/compliance\-to\-policy\-go which
provides a flexible plugin framework for leveraging OSCAL with various
PVPs.
.SH COMMANDS
\f[B]completion\f[R] Generate the autocompletion script for the
specified shell.
.PP
\f[B]generate\f[R] Generate PVP policy from an assessment plan.
.PP
\f[B]help\f[R] Display help about any command.
.PP
\f[B]list\f[R] List information about supported frameworks and
components.
.PP
\f[B]info\f[R] Display information about a framework\[cq]s controls and
rules.
.PP
\f[B]plan\f[R] Generate a new assessment plan for a given compliance
framework ID.
.PP
\f[B]scan\f[R] Scan environment with assessment plan.
.PP
\f[B]version\f[R] Print the version.
.SH OPTIONS
\f[B]\-d\f[R], \f[B]\[en]debug\f[R] Output debug logs.
.PP
\f[B]\-h\f[R], \f[B]\[en]help\f[R] Show help for complyctl.
.PP
Run \f[B]complyctl [command] \[en]help\f[R] for more information about a
specific command.
.SH USAGE: Assessment Plan Scoping
.SS Leveraging the \f[CR]info\f[R] command
Use the \f[CR]info\f[R] command functionality to explore the
relationship between controls, rules, and parameters within a framework.
.IP
.EX
\&./bin/complyctl info anssi_bp28_minimal \-\-limit 5 # List the controls in the framework
\&./bin/complyctl info anssi_bp28_minimal \-\-control # List details about a control and rules used by that control
\&./bin/complyctl info anssi_bp28_minimal \-\-rule # List the parameters used be a specific rule
\&./bin/complyctl info anssi_bp28_minimal \-\-parameter # See the current set value and valid alternatives for a parameter
.EE
.SS Assessment Scoping using the \f[CR]plan\f[R] command
The \f[CR]plan\f[R] command is used for scoping an OSCAL Assessment
Plan.
To populate defaults for your assessment plan, use the
\f[CR]./bin/complyctl plan <framework\-id> \-\-dry\-run \-\-out config.yml\f[R]
command.
The \f[CR]config.yml\f[R] will be populated with the default values from
the selected \f[CR]framework\-id\f[R].
The fields of the \f[CR]config.yml\f[R] can be updated to scope
controls, rules, and parameters.
.IP
.EX
\&./bin/complyctl plan anssi_bp28_minimal \-\-dry\-run \-\-out config.yml # Populate defaults in config.ymla

\&./bin/complyctl plan anssi_bp28_minimal \-\-scope\-config config.yml  # Configure plan based on updates made in config.yml
.EE
.SS Configuring the Assessment Plan
Default values for the \f[CR]config.yml\f[R] are populated based on the
\f[CR]framework\-id\f[R] selected.
The \f[CR]config.yml\f[R] can be updated to scope controls, rules, and
parameters.
.IP
.EX
frameworkId: anssi_bp28_minimal
includeControls:
\- controlId: r30
  controlTitle: Removal Of Unused User Accounts
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: N/A
    value: N/A
\- controlId: r31
  controlTitle: User Password Strength
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: var_password_pam_ucredit
    value: \[dq]1\[dq]
  \- name: var_password_pam_unix_rounds
    value: \[dq]11\[dq]
.EE
.SS Controls
To configure the controls included in the assessment plan, use the
\f[CR]controlId\f[R] and \f[CR]controlTitle\f[R] YAML keys.
The \f[CR]includeRules\f[R] YAML key is used to include rules for a
specific controlId.
The \f[CR]selectParameters\f[R] YAML key is used to configure the
parameters applied to the rules for a specific controlId.
.SS Excluding Control(s)
To exclude a control in your assessment plan, delete the entire group of
YAML keys associated with the \f[CR]controlId\f[R].
The deleted fields will exclude that control from the generated
\f[CR]assessment\-plan.json\f[R].
The activities associated with that \f[CR]controlId\f[R] will be marked
\[lq]skipped\[rq] if there are no other controls in scope of the
activity.
.IP
.EX
# Example deletion of r31: User Password Strength
frameworkId: anssi_bp28_minimal
includeControls:
\- controlId: r30
  controlTitle: Removal Of Unused User Accounts
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: N/A
    value: N/A
.EE
.PP
Once the \f[CR]config.yml\f[R] is updated, the
\f[CR]assessment\-plan.json\f[R] will be generated with the updated list
of included controls.
.SS Rules
All rules associated with a controlId are included by default and are
indicated by the \[lq]*\[rq] wildcard.
To exclude a rule specific to a controlId, use the
\f[CR]excludeRules\f[R] YAML key.
To globally exclude a rule across all controls, use the
\f[CR]globalExcludeRules\f[R] YAML key.
.SS Exclude Rules for a Control
To exclude a rule specific to a \f[CR]controlId\f[R], use the
\f[CR]excludeRules\f[R] YAML key.
The \f[CR]excludeRules\f[R] YAML key takes priority over
\f[CR]includeControls\f[R] within a control.
When the rule is excluded, the \f[CR]selectParameters\f[R] values that
are associated with the rule will not be considered as part of the plan.
.IP
.EX
# Example excludeRules for controlId: r31
# excludeRules for account_password_set_max_life_root
frameworkId: anssi_bp28_minimal
includeControls:
\- controlId: r30
  controlTitle: Removal Of Unused User Accounts
  includeRules: # Initial global wildcard
  \- \[dq]*\[dq]
  selectParameters:
  \- name: N/A
    value: N/A
\- controlId: r31
  controlTitle: User Password Strength
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: var_password_pam_ucredit
    value: \[dq]1\[dq]
  \- name: var_password_pam_unix_rounds
    value: \[dq]11\[dq]
  excludeRules: # Use to exclude a rule specific to the controlId
  \- \[dq]accounts_password_set_max_life_root\[dq]
.EE
.SS Global Exclude Rules
To exclude a rule across all controls, use the
\f[CR]globalExcludeRules\f[R] YAML key.
The example below excludes all rules for all controlIds in the
\f[CR]config.yml\f[R].
The \f[CR]globalExcludeRules\f[R] YAML key takes priority over
\f[CR]includeRules\f[R] globally.
.IP
.EX
# Example using globalExcludeRules for all rules \[dq]*\[dq]
frameworkId: anssi_bp28_minimal
includeControls:
\- controlId: r30
  controlTitle: Removal Of Unused User Accounts
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: N/A
    value: N/A
\- controlId: r31
  controlTitle: User Password Strength
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: var_password_pam_ucredit
    value: \[dq]1\[dq]
  \- name: var_password_pam_unix_rounds
    value: \[dq]11\[dq]
globalExcludeRules:
\- \[dq]*\[dq]
.EE
.PP
One passing the \f[CR]config.yml\f[R] with the
\f[CR]\-\-scope\-config config.yml\f[R] flag, the assessment plan will
be generated with the updated list of rules.
.SS Parameters
The parameters of the assessment\-plan are grouped by remarks value.
To configure the \f[CR]selectParameters\f[R] field, update the
second\-level YAML key \f[CR]value\f[R] with a valid alternative.
.PP
If you update the value of a parameter to an invalid alternative, you
will receive an error that populates the available alternatives.
.SS Initial Set Parameters
The content below reflects the set\-parameter values for the frameworkId
in the \f[CR]config.yml\f[R].
The \f[CR]selectParameters\f[R] are included underneath each
\f[CR]controlId\f[R] based on remarks grouping with rules from the OSCAL
Component Definition implemented requirements.
The parameter value can be configured based on the available
alternatives.
.IP
.EX
# Example default selectParameters value for controlId: r30 and r31.
frameworkId: anssi_bp28_minimal
includeControls:
\- controlId: r30
  controlTitle: Removal Of Unused User Accounts
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: N/A
    value: N/A
\- controlId: r31
  controlTitle: User Password Strength
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: var_password_pam_ucredit
    value: \[dq]1\[dq] # Initially set parameter value
  \- name: var_password_pam_unix_rounds
    value: \[dq]11\[dq]
.EE
.SS Invalid Alternative Parameter Value Update
An invalid update to the \f[CR]selectParameters\f[R] field with
\[lq]test\-error\[rq] will not write the
\f[CR]assessment\-plan.json\f[R] with the updated value.
Below, the controlId \f[CR]r31\f[R] has an invalid parameter update to
\[lq]var_password_pam_ucredit\[rq] in \f[CR]r31\f[R].
When passing the \f[CR]\-\-scope\-config config.yml\f[R] flag, the
\f[CR]assessment\-plan.json\f[R] will not be written and an error will
be produced with valid alternatives printed to the screen.
.IP
.EX
# Example incorrect update to selectParameters value for controlId: r31.
frameworkId: anssi_bp28_minimal
includeControls:
\- controlId: r30
  controlTitle: Removal Of Unused User Accounts
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: N/A
    value: N/A
\- controlId: r31
  controlTitle: User Password Strength
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: var_password_pam_ucredit
    value: \[dq]test\-error\[dq] # Update to \[dq]test\-error\[dq]
  \- name: var_password_pam_unix_rounds
    value: \[dq]11\[dq]
.EE
.SS Valid Alternative Parameter Value Update
A valid update to the \f[CR]selectParameters\f[R] field with an
available alternative will write the \f[CR]assessment\-plan.json\f[R]
with the updated value.
Below, the controlId \f[CR]r31\f[R] has a valid parameter update to
\[lq]var_password_pam_ucredit\[rq] in \f[CR]r31\f[R].
When passing the \f[CR]\-\-scope\-config config.yml\f[R] flag, the
\f[CR]assessment\-plan.json\f[R] will be written reflecting that update.
.IP
.EX
# Example update to selectParameters value for controlId: r31.
frameworkId: anssi_bp28_minimal
includeControls:
\- controlId: r30
  controlTitle: Removal Of Unused User Accounts
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: N/A
    value: N/A
\- controlId: r31
  controlTitle: User Password Strength
  includeRules:
  \- \[dq]*\[dq]
  selectParameters:
  \- name: var_password_pam_ucredit
    value: \[dq]0\[dq] # Update to available alternative
  \- name: var_password_pam_unix_rounds
    value: \[dq]11\[dq]
.EE
.SS Assessment Plan Scope Inheritance
When excluding a \f[CR]controlId\f[R] from the \f[CR]config.yml\f[R],
the initial \[lq]*\[rq] \f[CR]includeRules\f[R] values will be skipped
and not assessed for the \f[CR]controlId\f[R] in the assessment plan.
The activities of the assessment plan will indicate \[lq]skipped\[rq]
for a rule that is globally excluded.
Therefore, all parameters associated with a globally excluded rule will
not be used in the generated \f[CR]assessment\-plan.json\f[R].
.SH SEE ALSO
complyctl\-openscap\-plugin(7)
.PP
See the Upstream project at https://github.com/complytime/complyctl for
more detailed documentation.
.PP
See https://github.com/oscal\-compass/compliance\-to\-policy\-go
project.
.SH COPYRIGHT
© 2025 Red Hat, Inc.\ Complyctl is released under the terms of the
Apache\-2.0 license.
.SH AUTHORS
Marcus Burghardt \c
.MT maburgha@redhat.com
.ME \c.
