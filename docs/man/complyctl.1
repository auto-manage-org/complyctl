.\" Automatically generated by Pandoc 3.1.11.1
.\"
.TH "COMPLYCTL" "1" "April 2025" "Complyctl Manual" ""
.SH NAME
complyctl \- Complyctl CLI perform compliance assessment activities
using plugins for different underlying technologies.
.SH SYNOPSIS
\f[B]complyctl\f[R] [command] [flags]
.SH DESCRIPTION
Complyctl CLI leverages OSCAL to perform compliance assessment
activities, using plugins for each stage of the lifecycle.
.PP
Complyctl can be extended to support desired policy engines (PVPs) by
the use of plugins.
The plugin acts as the integration between complyctl and the PVPs native
interface.
Each plugin is responsible for converting the policy content described
in OSCAL into the input format expected by the PVP.
In addition, the plugin converts the raw results provided by the PVP
into the schema used by complyctl to generate OSCAL output.
.PP
Plugins communicate with complyctl via gRPC and can be authored using
any preferred language.
The plugin acts as the gRPC server while the complyctl CLI acts as the
client.
When a complyctl command is run, it invokes the appropriate method
served by the plugin.
.PP
Complyctl is built on
https://github.com/oscal\-compass/compliance\-to\-policy\-go which
provides a flexible plugin framework for leveraging OSCAL with various
PVPs.
.SH COMMANDS
\f[B]completion\f[R] Generate the autocompletion script for the
specified shell.
.PP
\f[B]generate\f[R] Generate PVP policy from an assessment plan.
.PP
\f[B]help\f[R] Display help about any command.
.PP
\f[B]list\f[R] List information about supported frameworks and
components.
.PP
\f[B]info\f[R] Display information about a framework\[cq]s controls and
rules.
.PP
\f[B]plan\f[R] Generate a new assessment plan for a given compliance
framework ID.
.PP
\f[B]scan\f[R] Scan environment with assessment plan.
.PP
\f[B]version\f[R] Print the version.
.SH OPTIONS
\f[B]\-d\f[R], \f[B]\[en]debug\f[R] Output debug logs.
.PP
\f[B]\-h\f[R], \f[B]\[en]help\f[R] Show help for complyctl.
.PP
Run \f[B]complyctl [command] \[en]help\f[R] for more information about a
specific command.
.SH EXAMPLES
.SS Leveraging the info command
Use the \f[CR]info\f[R] command functionality to explore information
about controls, rules, and parameters within a framework.
.IP
.EX
$ complyctl info anssi_bp28_minimal
# List the controls in the framework

$ complyctl info anssi_bp28_minimal \-\-control <control\-id>
# List details about a control and rules used by that control

$ complyctl info anssi_bp28_minimal \-\-rule <rule\-id>
# List the parameters used be a specific rule

$ complyctl info anssi_bp28_minimal \-\-parameter <parameter\-id>
# See the current set value and valid alternatives for a parameter
.EE
.SS Assessment Scoping using the plan command
The \f[CR]plan\f[R] command is used for scoping an OSCAL Assessment
Plan.
Default scope can be changed via configuration file generated by the
\f[CR]\-\-dry\-run\f[R] option.
The fields of the \f[CR]config.yml\f[R] can be updated to scope
controls, rules, and parameters.
.IP
.EX
$ complyctl plan anssi_bp28_minimal \-\-dry\-run \-\-out config.yml 
# Populate framework\-id defaults in config.yml

$ complyctl plan anssi_bp28_minimal \-\-scope\-config config.yml  
# Configure plan based on updates made in config.yml
.EE
.SS Configuring the Assessment Plan
.SS Excluding Controls and Rules
Excluding components of the assessment plan works the same way for both
controls and rules.
To exclude a control from the assessment plan, delete the entire group
of YAML keys associated with that \f[CR]controlId\f[R].
Activities associated with that \f[CR]controlId\f[R] will be marked as
\[lq]skipped\[rq] if there are no other controls in scope of the
activity.
.PP
All rules associated with a controlId are included by default and
indicated by the \[lq]*\[rq] global wildcard.
To exclude a rule specific to a controlId, use the
\f[CR]excludeRules\f[R] YAML key.
To exclude a rule across all controls, use the
\f[CR]globalExcludeRules\f[R] YAML key.
The \f[CR]globalExcludeRules\f[R] YAML key takes priority over
\f[CR]includeRules\f[R] globally.
.SS Selecting Parameter Values
Parameters of the assessment\-plan are grouped by remarks value.
To configure the \f[CR]selectParameters\f[R] field, update the
second\-level YAML key \f[CR]value\f[R] with a valid alternative for the
selected parameter.
Selecting parameter values in the \f[CR]selectParameters\f[R] field will
allow you to update the initial set value for a parameter.
If the update to the parameter value is not a valid parameter
alternative, the \f[CR]assessment\-plan.json\f[R] will not be written
and an error will be produced, listing the valid alternatives.
.PP
Below is an example \f[CR]config.yml\f[R].
The example excludes the controlId \f[CR]r30\f[R] and uses the
\f[CR]excludeRules\f[R] YAML key to exclude
\f[CR]accounts_password_set_max_life_root\f[R].
The \f[CR]globalExcludeRules\f[R] YAML key is used to exclude all rules
for all controlIds in the \f[CR]config.yml\f[R].
The controlId \f[CR]r31\f[R] has a valid parameter update to
\f[CR]var_password_pam_ucredit\f[R] from \[lq]1\[rq] to \[lq]365.\[rq]
.IP
.EX
frameworkId: anssi_bp28_minimal
includeControls:
#\- controlId: r30 # Delete all fields associated with r30
#  controlTitle: Removal Of Unused User Accounts
#  includeRules:
#  \- \[dq]*\[dq]
#  selectParameters:
#  \- name: N/A
#    value: N/A
\- controlId: r31
  controlTitle: User Password Strength
  includeRules:
  \- \[dq]*\[dq]
  excludeRules: # Use to exclude a rule specific to the controlId
  \- \[dq]accounts_password_set_max_life_root\[dq]
  waiveRules: # Use to waive a rule specific to the controlId
  \- \[dq]accounts_password_pam_minlen\[dq]
  selectParameters:
  \- name: var_password_pam_ucredit # Initial value = \[dq]1\[dq]
    value: \[dq]365\[dq] # Update parameter value to a valid alternative (\[dq]365\[dq])
  \- name: var_password_pam_unix_rounds
    value: \[dq]11\[dq] # Initial value = \[dq]11\[dq]
globalExcludeRules:
\- \[dq]*\[dq] # This will exclude all rules for all controlIds
globalWaiveRules:
\- \[dq]*\[dq] # This will waive all rules for all controlIds
.EE
.SS Assessment Plan Scope Inheritance
When excluding a \f[CR]controlId\f[R] from the \f[CR]config.yml\f[R],
all rules associated with the \f[CR]controlId\f[R] will be skipped and
not assessed in the assessment plan.
If a rule is associated with multiple controls, they should be
explicitly excluded for all related controls or via
\f[CR]globalExcludeRules\f[R].
Otherwise the rule will still be executed by the scanner if any control
includes it.
.PP
The activities of the assessment plan will be indicated as
\[lq]skipped\[rq] for rules that are globally excluded.
Therefore, all parameters associated with a globally excluded rule will
not be used in the generated \f[CR]assessment\-plan.json\f[R].
.PP
When waiving a rule, the values of \f[CR]includeRules\f[R] will first be
checked to ensure the rule was not skipped.
If the rule is not skipped, it will be marked as \[lq]waived\[rq] in the
Assessment Plan.
Waived rules are expected to fail due to any known exception related to
the environment being scanned.
Waiving rules with \f[CR]waiveRules\f[R] has the same functionality of
\f[CR]globalWaiveRules\f[R].
All rules marked as \[lq]waived\[rq] will be propogated across
\f[CR]controlIds\f[R].
.PP
The output in \f[CR]assessment\-results.md\f[R] will reflect the
\f[CR]Waived Rules\f[R] within the \f[CR]Failed Rules\f[R] section.
In the case of a rule passing, it will be included in the
\f[CR]Passed Rules\f[R] section.
.PP
The activities of the assessment plan will be indicated as
\[lq]waived\[rq] for rules that are globally waived.
Therefore, all parameters associated with a globally waived rule will
not be altered in the generated \f[CR]assessment\-plan.json\f[R].
.PP
After configuring the \f[CR]assessment\-plan.json\f[R] the activities of
the assessment plan and their selected parameter values will be updated.
.SH SEE ALSO
complyctl\-openscap\-plugin(7)
.PP
See the Upstream project at https://github.com/complytime/complyctl for
more detailed documentation.
.PP
See https://github.com/oscal\-compass/compliance\-to\-policy\-go
project.
.SH COPYRIGHT
Â© 2025 Red Hat, Inc.\ Complyctl is released under the terms of the
Apache\-2.0 license.
.SH AUTHORS
Marcus Burghardt \c
.MT maburgha@redhat.com
.ME \c.
